/*
Copyright 2023 The SODA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/soda-cdm/kahu-manager/apis/kahumgr/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSchedulePolicies implements SchedulePolicyInterface
type FakeSchedulePolicies struct {
	Fake *FakeKahumgrV1beta1
	ns   string
}

var schedulepoliciesResource = schema.GroupVersionResource{Group: "kahumgr.io", Version: "v1beta1", Resource: "schedulepolicies"}

var schedulepoliciesKind = schema.GroupVersionKind{Group: "kahumgr.io", Version: "v1beta1", Kind: "SchedulePolicy"}

// Get takes name of the schedulePolicy, and returns the corresponding schedulePolicy object, and an error if there is any.
func (c *FakeSchedulePolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.SchedulePolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(schedulepoliciesResource, c.ns, name), &v1beta1.SchedulePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SchedulePolicy), err
}

// List takes label and field selectors, and returns the list of SchedulePolicies that match those selectors.
func (c *FakeSchedulePolicies) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.SchedulePolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(schedulepoliciesResource, schedulepoliciesKind, c.ns, opts), &v1beta1.SchedulePolicyList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.SchedulePolicyList{ListMeta: obj.(*v1beta1.SchedulePolicyList).ListMeta}
	for _, item := range obj.(*v1beta1.SchedulePolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested schedulePolicies.
func (c *FakeSchedulePolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(schedulepoliciesResource, c.ns, opts))

}

// Create takes the representation of a schedulePolicy and creates it.  Returns the server's representation of the schedulePolicy, and an error, if there is any.
func (c *FakeSchedulePolicies) Create(ctx context.Context, schedulePolicy *v1beta1.SchedulePolicy, opts v1.CreateOptions) (result *v1beta1.SchedulePolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(schedulepoliciesResource, c.ns, schedulePolicy), &v1beta1.SchedulePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SchedulePolicy), err
}

// Update takes the representation of a schedulePolicy and updates it. Returns the server's representation of the schedulePolicy, and an error, if there is any.
func (c *FakeSchedulePolicies) Update(ctx context.Context, schedulePolicy *v1beta1.SchedulePolicy, opts v1.UpdateOptions) (result *v1beta1.SchedulePolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(schedulepoliciesResource, c.ns, schedulePolicy), &v1beta1.SchedulePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SchedulePolicy), err
}

// Delete takes name of the schedulePolicy and deletes it. Returns an error if one occurs.
func (c *FakeSchedulePolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(schedulepoliciesResource, c.ns, name), &v1beta1.SchedulePolicy{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSchedulePolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(schedulepoliciesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.SchedulePolicyList{})
	return err
}

// Patch applies the patch and returns the patched schedulePolicy.
func (c *FakeSchedulePolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.SchedulePolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(schedulepoliciesResource, c.ns, name, pt, data, subresources...), &v1beta1.SchedulePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SchedulePolicy), err
}
