/*
Copyright 2023 The SODA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/soda-cdm/kahu-manager/apis/kahumgr/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SchedulePolicyLister helps list SchedulePolicies.
// All objects returned here must be treated as read-only.
type SchedulePolicyLister interface {
	// List lists all SchedulePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.SchedulePolicy, err error)
	// SchedulePolicies returns an object that can list and get SchedulePolicies.
	SchedulePolicies(namespace string) SchedulePolicyNamespaceLister
	SchedulePolicyListerExpansion
}

// schedulePolicyLister implements the SchedulePolicyLister interface.
type schedulePolicyLister struct {
	indexer cache.Indexer
}

// NewSchedulePolicyLister returns a new SchedulePolicyLister.
func NewSchedulePolicyLister(indexer cache.Indexer) SchedulePolicyLister {
	return &schedulePolicyLister{indexer: indexer}
}

// List lists all SchedulePolicies in the indexer.
func (s *schedulePolicyLister) List(selector labels.Selector) (ret []*v1beta1.SchedulePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SchedulePolicy))
	})
	return ret, err
}

// SchedulePolicies returns an object that can list and get SchedulePolicies.
func (s *schedulePolicyLister) SchedulePolicies(namespace string) SchedulePolicyNamespaceLister {
	return schedulePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SchedulePolicyNamespaceLister helps list and get SchedulePolicies.
// All objects returned here must be treated as read-only.
type SchedulePolicyNamespaceLister interface {
	// List lists all SchedulePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.SchedulePolicy, err error)
	// Get retrieves the SchedulePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.SchedulePolicy, error)
	SchedulePolicyNamespaceListerExpansion
}

// schedulePolicyNamespaceLister implements the SchedulePolicyNamespaceLister
// interface.
type schedulePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SchedulePolicies in the indexer for a given namespace.
func (s schedulePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SchedulePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SchedulePolicy))
	})
	return ret, err
}

// Get retrieves the SchedulePolicy from the indexer for a given namespace and name.
func (s schedulePolicyNamespaceLister) Get(name string) (*v1beta1.SchedulePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("schedulepolicy"), name)
	}
	return obj.(*v1beta1.SchedulePolicy), nil
}
